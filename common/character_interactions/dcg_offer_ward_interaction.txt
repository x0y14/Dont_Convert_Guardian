#Offer a ward to a landed character
#This interaction is referenced in code! If it's renamed you have to ping a coder
offer_ward_interaction = {
	category = interaction_category_friendly
	icon = child

	desc = offer_ward_interaction_desc

	send_name = SEND_PROPOSAL

	# secondary_actor = ward
	# actor = ward.liege - can be same as ward
	# secondary_recipient = guardian
	# recipient = guardian.liege - can be same as guardian

	redirect = {
		scope:recipient = {
			if = {
				limit = {
					exists = employer
					NOT = { employer = scope:recipient }
				}
				save_scope_as = secondary_recipient
				employer = {
					save_scope_as = recipient
				}
			}
		}		
	}

	populate_actor_list = {
		scope:actor = {
			if = {
				limit = {
					is_adult = no
					is_physically_able = yes
					NOT = {
						any_relation = {
							type = guardian
							this = scope:recipient
						}
					}
					is_hostage = no
					is_travelling = no #Can be removed once the can_be_picked is fixed to re-evaluate
				}
				add_to_list = characters
			}
			every_courtier = {
				limit = {
					is_adult = no
					is_physically_able = yes
					NOT = {
						any_relation = {
							type = guardian
							this = scope:recipient
						}
					}
					is_hostage = no
					is_travelling = no #Can be removed once the can_be_picked is fixed to re-evaluate
				}
				add_to_list = characters
			}
			every_courtier_away = {
				limit = {
					is_adult = no
					is_physically_able = yes
					NOT = {
						any_relation = {
							type = guardian
							this = scope:recipient
						}
					}
					is_hostage = no
					is_travelling = no #Can be removed once the can_be_picked is fixed to re-evaluate
				}
				add_to_list = characters
			}
		}
	}

	populate_recipient_list = {
		scope:recipient = {
			if = {
				limit = {
					is_adult = yes
					num_of_relation_ward < 2
				}
				add_to_list = characters
			}
			every_courtier = {
				limit = {
					is_adult = yes
					num_of_relation_ward < 2
					NOR = {
						is_theocratic_lessee = yes
						is_consort_of = scope:recipient
					}
				}
				add_to_list = characters
			}
		}
	}

	greeting = positive
	notification_text = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:actor = scope:secondary_actor
					NOT = { scope:recipient = scope:secondary_recipient }
				}
				desc = EDUCATE_ACTOR_REQUEST
			}
			triggered_desc = {
				trigger = {
					scope:actor = scope:secondary_actor
					scope:recipient = scope:secondary_recipient
				}
				desc = EDUCATE_ACTOR_PERSONALLY_REQUEST
			}
			triggered_desc = {
				trigger = {
					NOT = { scope:recipient = scope:secondary_recipient }
					NOT = { scope:actor = scope:secondary_actor }
				}
				desc = EDUCATE_ACTOR_CHILD_REQUEST
			}
			triggered_desc = {
				trigger = {
					scope:recipient = scope:secondary_recipient
					NOT = { scope:actor = scope:secondary_actor }
				}
				desc = EDUCATE_ACTOR_CHILD_PERSONALLY_REQUEST
			}
		}
	}
	
	prompt = {
		first_valid = {	
			triggered_desc = {
				trigger = {
					exists = scope:secondary_actor
					scope:actor = scope:recipient
				}
				desc = EDUCATE_SELECT_YOUR_GUARDIAN
			}
			triggered_desc = {
				trigger = {
					exists = scope:secondary_actor
					scope:secondary_actor = {
						is_adult = no
					}
				}
				desc = EDUCATE_SELECT_THEIR_GUARDIAN
			}
			desc = EDUCATE_SELECT_YOUR_WARD
		}
	}

	is_shown = {
		scope:recipient = {
			NOT = { this = scope:actor }
			is_playable_character = yes
			is_alive = yes
		}
		trigger_if = {
			limit = {
				exists = scope:secondary_recipient
			}
			scope:secondary_recipient = {
				is_adult = yes
				NOR = {
					is_theocratic_lessee = yes
					is_consort_of = scope:recipient
				}
			}
		}
		trigger_if = {
			limit = {
				scope:actor = {
					is_landless_adventurer = yes
				}
			}
			scope:recipient = {
				is_courtier_of = scope:actor
			}
		}
	}
	
	is_valid_showing_failures_only = {
		custom_description = {
			text = character_to_guard_exists
			subject = scope:recipient
			scope:recipient = {
				OR = {
					any_courtier = {
						is_adult = yes
						num_of_relation_ward < 2
					}
					AND = {
						is_adult = yes
						num_of_relation_ward < 2
					}
				}
			}
		}
		custom_description = {
			text = character_to_educate_exists
			object = scope:actor
			scope:actor = {
				OR = {
					any_courtier = {
						is_adult = no
						is_physically_able = yes
						NOR = {
							any_relation = {
								type = guardian
								this = scope:recipient
							}
							any_relation = {
								type = guardian
								OR = {
									is_at_war_with = scope:actor
									any_liege_or_above = { is_at_war_with = scope:actor }
								}
							}
						}
					}
					AND = {
						is_adult = no
						is_physically_able = yes
						NOR = {
							any_relation = {
								type = guardian
								this = scope:recipient
							}
							any_relation = {
								type = guardian
								OR = {
									is_at_war_with = scope:actor
									any_liege_or_above = { is_at_war_with = scope:actor }
								}
							}
						}
					}
				}
			}
		}
		NOT = {
			scope:actor = { is_at_war_with = scope:recipient }
		}
		scope:recipient = {
			is_imprisoned = no
			is_busy_in_events_localised = yes
		}
		trigger_if = { # Ward
			limit = {
				exists = scope:secondary_actor
			}
			scope:secondary_actor = {
				is_imprisoned = no
				is_busy_in_events_localised = yes
				custom_tooltip = {
					text = ward_travelling_tt
					NOT = { exists = var:ward_travelling_to_guardian }
				}
				custom_tooltip = {
					text = hostage_travelling_tt
					NOT = { exists = var:hostage_travelling_to_warden }
				}
				# Structured this way for tooltip purposes
				trigger_if = {
					limit = { exists = var:ward_waiting_for_guardian }
					var:ward_waiting_for_guardian = {
						custom_tooltip = {
							text = guardian_travelling_tt
							NOT = { exists = scope:secondary_actor.var:ward_waiting_for_guardian }
						}
					}
				}
			}
		}
		trigger_if = { # Guardian
			limit = {
				exists = scope:secondary_recipient
			}
			scope:secondary_recipient = {
				is_imprisoned = no
				is_busy_in_events_localised = yes
				custom_tooltip = {
					text = guardian_travelling_tt
					NOT = { exists = var:guardian_travelling_to_ward }
				}
				custom_tooltip = {
					text = hostage_travelling_tt
					NOT = { exists = var:hostage_travelling_to_warden }
				}
				# Structured this way for tooltip purposes
				trigger_if = {
					limit = { exists = var:guardian_waiting_for_ward }
					var:guardian_waiting_for_ward = {
						custom_tooltip = {
							text = ward_travelling_tt
							NOT = { exists = scope:secondary_recipient.var:guardian_waiting_for_ward }
						}
					}
				}
			}
		}
		#limit range for landless adventurers
		trigger_if = {
			limit = {
				scope:actor = {
					is_landless_adventurer = yes
				}
			}
			#Has to be used instead of diplo range checks in laamp to landed interactions
			ep3_laamp_diplo_range_trigger = {
				TARGET = scope:recipient
				LAAMP = scope:actor
			}
		}
	}

	can_be_picked = {
		is_available = yes #Potential Issue: This is only evaluated if both secondary recipient/actor are unselected TIT-49632
		# Under offer
		custom_tooltip = {
			text = ward_already_offered_awaiting_response_tt
			NOT = { has_character_flag = under_offer_as_ward_flag }
		}
		custom_tooltip = {
			text = guardian_already_offered_awaiting_response_tt
			NOT = { has_character_flag = under_offer_as_guardian_flag }
		}
		# Already offered
		custom_tooltip = {
			text = ward_already_offered_awaiting_travel_tt
			NOR = {
				exists = var:ward_travelling_to_guardian
				exists = var:ward_waiting_for_guardian
			}
		}
		custom_tooltip = {
			text = guardian_already_offered_awaiting_travel_tt
			NOR = {
				exists = var:guardian_travelling_to_ward
				AND = {
					exists = var:guardian_waiting_for_ward
					num_of_relation_ward >= 1
				}
			}
		}
		# Hostage
		custom_tooltip = {
			text = hostage_travelling_tt
			NOT = { exists = var:hostage_travelling_to_warden }
		}
	}

	on_send = {
		scope:secondary_recipient = {
			add_character_flag = {
				flag = under_offer_as_guardian_flag
				months = 1
			}
		}
		scope:secondary_actor = {
			add_character_flag = {
				flag = under_offer_as_ward_flag
				months = 1
			}
		}
	}

	on_accept = {
		scope:secondary_actor = { save_scope_as = ward }
		scope:actor = { save_scope_as = ward_liege }
		scope:recipient = { save_scope_as = guardian_liege }
		scope:secondary_recipient = { save_scope_as = guardian }

		if = {
			limit = { scope:ward.age >= 15 }
			custom_description_no_bullet = {
				text = ward_nearing_adulthood_tt
				object = scope:ward
			}
		}

		# Handle existing guardian
		scope:ward = {
			if = {
				limit = {
					any_relation = {
						type = guardian
						NOT = { this = scope:guardian }
					}
				}
				random_relation = {
					type = guardian
					save_scope_as = old_guardian
					
					#Letter event to guardian
					if = {
						limit = {
							NOT = { scope:old_guardian = scope:actor }
						}
						scope:old_guardian = { trigger_event = char_interaction.0090 }
					}
				}
				scope:actor = {
					send_interface_message = {
						type = event_childhood_neutral
						title = remove_guardian_interaction_notification
						left_icon = scope:old_guardian
						right_icon = scope:ward
						remove_guardian_effect = {
							GUARDIAN = scope:old_guardian
							WARD = scope:ward
							RETURN_WARD = yes
							HIDE_OPINION = no
						}

						#Was education promised in interaction or in vassal.2001? Then you get an opinion penalty
						if = {
							limit = {
								exists = scope:ward.var:character_requested_as_educator
								scope:ward.var:character_requested_as_educator = scope:old_guardian
								exists = scope:ward.var:character_making_education_request
								scope:ward.var:character_making_education_request = {
									is_alive = yes
									OR = {
										this = scope:old_guardian
										scope:old_guardian = { is_courtier_of = prev }
									}
									NOT = { this = scope:actor }
								}
							}
							scope:ward.var:character_making_education_request = {
								add_opinion = {
									modifier = insult_opinion
									target = scope:actor
									opinion = -15
								}
							}
						}
					}
				}
			}
		}

		show_as_tooltip = {
			scope:guardian  = { set_relation_ward = scope:ward }
			educate_child_interaction_effect = yes
		}

		scope:actor = {
			if = {
				limit = { 
					NOT = { this = scope:recipient } 
					scope:ward = {
						#num_of_relation_guardian = 0
						NOR = {
							any_relation = {
								type = guardian
								this = scope:recipient
							}
							any_relation = {
								type = guardian
								OR = {
									is_at_war_with = scope:actor
									any_liege_or_above = { is_at_war_with = scope:actor }
								}
							}
						}
					}
					scope:guardian = { num_of_relation_ward < 2	}
				}
				trigger_event = char_interaction.0080
			}
		}

		# If we're a clan this interaction affects unity
		add_clan_unity_interaction_effect = {
			CHARACTER = scope:actor
			TARGET = scope:recipient
			VALUE = miniscule_unity_gain
			DESC = clan_unity_ward_offerage.desc
			REVERSE_NON_HOUSE_TARGET = yes
		}		
	}

	on_decline = {
		# If we're a clan this interaction affects unity. Conditioned to the opinion modifier to avoid exploit
		if = {
			limit = {
				NOT = {
					scope:actor = {
						has_opinion_modifier = {
							modifier = declined_ward_opinion
							target = scope:recipient
						}
					}
				}
			}
			add_clan_unity_interaction_effect = {
				CHARACTER = scope:actor
				TARGET = scope:recipient
				VALUE = miniscule_unity_loss
				DESC = clan_unity_ward_decline.desc
				REVERSE_NON_HOUSE_TARGET = yes
			}
		}


		scope:actor = {
			trigger_event = char_interaction.0081
			add_opinion = {
				modifier = declined_ward_opinion
				target = scope:recipient
			}
		}

		scope:secondary_recipient = { remove_character_flag = under_offer_as_guardian_flag }
		scope:secondary_actor = { remove_character_flag = under_offer_as_ward_flag }
	}
	
	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:education_hook = yes
			scope:actor = { has_strong_hook = scope:recipient }
		}
	}
	
	ai_accept = {
		base = 0

		# AI should always accept children the Player has jurisdiction over
		# You can always send your own child away
		modifier = {
			add = 200
			scope:secondary_actor = {
				is_adult = no
				is_child_of = scope:actor
			}
			desc = AI_YOUR_OWN_CHILD
		}
		# Including you
		modifier = {
			add = 200
			scope:secondary_actor = scope:actor
			desc = AI_EDUCATE_YOU
		}
		# You can always send your courtier's child away
		modifier = {
			add = 200
			scope:secondary_actor = {
				is_adult = no
				NOT = { is_child_of = scope:actor }
				is_courtier_of = scope:actor
			}
			#But only if you are of interest to the educator. To educate the courtier of a count is of no interest to a foreign emperor.
			scope:secondary_recipient ?= {
				OR = {
					is_of_major_or_minor_interest_trigger = { CHARACTER = scope:actor }
					is_of_major_or_minor_interest_trigger = { CHARACTER = scope:secondary_actor }
					highest_held_title_tier <= scope:actor.highest_held_title_tier
				}
			}
			desc = AI_YOUR_COURTIER_CHILD
		}

		#Weak hook: extra points
		modifier = {
			scope:education_hook = yes
			add = 100
			scope:actor = { NOT = { has_strong_hook = scope:recipient } }
			desc = SCHEME_WEAK_HOOK_USED
		}
		
		modifier = { # Respect the liege
			add = 50
			scope:recipient = { target_is_liege_or_above = scope:actor }
			desc = EDUCATE_CHILD_ACTOR_IS_MY_LIEGE
		}

		#If the child is theirs they are more likely to accept
		modifier = {
			add = 100
			scope:secondary_actor = {
				is_child_of = scope:recipient
				is_adult = no
			}
			desc = AI_MY_CHILD
		}

		#If the child is the educator's child they should be more likely to accept
		modifier = {
			add = 100
			exists = scope:secondary_recipient
			scope:secondary_actor = {
				is_adult = no
				is_child_of = scope:secondary_recipient
			}
			desc = AI_MY_CHILD
		}

		#Their opinion of you matters!
		opinion_modifier = {
			opinion_target = scope:actor
			who = scope:recipient
			multiplier = 0.5
			desc = AI_OPINION_REASON
		}

		#Make less likely that they accept if they are of another culture
		modifier = {
			add = -10
			trigger = {
				scope:secondary_actor = {
					culture = { has_same_culture_heritage = scope:recipient.culture }
					NOT = { has_same_culture_as = scope:recipient }
				}
			}
			desc = AI_NOT_CULTURE
		}
		
		modifier = {
			add = -20
			trigger = {
				scope:secondary_actor = {
					NOT = { culture = { has_same_culture_heritage = scope:recipient.culture } }
				}
			}
			desc = AI_NOT_CULTURE
		}

		#Less likely if they don't like other religion
		modifier = {
			add = {
				value = -5
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					subtract = 5
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					subtract = 10
				}
			}
			trigger = {
				NOT = { scope:recipient.faith = scope:actor.faith }
			}
			desc = AI_RELIGION
		}

		#The better the educator is at a skill, the less likely they are to accept
		compare_modifier = {
			trigger = {
				scope:secondary_recipient ?= {
					diplomacy >= 10
				}
				NOT = { scope:actor = scope:secondary_actor }
			}
			target = scope:secondary_recipient
			value = diplomacy
			step = 4
			multiplier = -0.5
			offset = -2
			max = 0
			desc = AI_GUARDIAN_SKILL_DIPLOMACY
		}
		compare_modifier = {
			trigger = {
				scope:secondary_recipient ?= {
					martial >= 10
				}
				NOT = { scope:actor = scope:secondary_actor }
			}
			target = scope:secondary_recipient
			value = martial
			step = 4
			multiplier = -0.5
			offset = -2
			max = 0
			desc = AI_GUARDIAN_SKILL_MARTIAL
		}
		compare_modifier = {
			trigger = {
				scope:secondary_recipient ?= {
					stewardship >= 10
				}
				NOT = { scope:actor = scope:secondary_actor }
			}
			target = scope:secondary_recipient
			value = stewardship
			step = 4
			multiplier = -0.5
			offset = -2
			max = 0
			desc = AI_GUARDIAN_SKILL_STEWARDSHIP
		}
		compare_modifier = {
			trigger = {
				scope:secondary_recipient ?= {
					intrigue >= 10
				}
				NOT = { scope:actor = scope:secondary_actor }
			}
			target = scope:secondary_recipient
			value = intrigue
			step = 4
			multiplier = -0.5
			offset = -2
			max = 0
			desc = AI_GUARDIAN_SKILL_INTRIGUE
		}
		compare_modifier = {
			trigger = {
				scope:secondary_recipient ?= {
					learning >= 10
				}
				NOT = { scope:actor = scope:secondary_actor }
			}
			target = scope:secondary_recipient
			value = learning
			step = 4
			multiplier = -0.5
			offset = -2
			max = 0
			desc = AI_GUARDIAN_SKILL_LEARNING
		}

		#The better you as an educator is at a skill, the more likely they are to accept
		compare_modifier = {
			trigger = {
				AND = {
					scope:actor = scope:secondary_actor
					scope:actor = {
						diplomacy >= 11
					}
				}
			}
			target = scope:actor
			value = diplomacy
			step = 4
			multiplier = 0.75
			offset = -5
			min = 0
			desc = AI_GUARDIAN_SKILL_DIPLOMACY
		}
		compare_modifier = {
			trigger = {
				AND = {
					scope:actor = scope:secondary_actor
					scope:actor = {
						martial >= 11
					}
				}
			}
			target = scope:actor
			value = martial
			step = 4
			multiplier = 0.75
			offset = -5
			min = 0
			desc = AI_GUARDIAN_SKILL_MARTIAL
		}
		compare_modifier = {
			trigger = {
				AND = {
					scope:actor = scope:secondary_actor
					scope:actor = {
						stewardship >= 11
					}
				}
			}
			target = scope:actor
			value = stewardship
			step = 4
			multiplier = 0.75
			offset = -5
			min = 0
			desc = AI_GUARDIAN_SKILL_STEWARDSHIP
		}
		compare_modifier = {
			trigger = {
				AND = {
					scope:actor = scope:secondary_actor
					scope:actor = {
						intrigue >= 11
					}
				}
			}
			target = scope:actor
			value = intrigue
			step = 4
			multiplier = 0.75
			offset = -5
			min = 0
			desc = AI_GUARDIAN_SKILL_INTRIGUE
		}
		compare_modifier = {
			trigger = {
				AND = {
					scope:actor = scope:secondary_actor
					scope:actor = {
						learning >= 11
					}
				}
			}
			target = scope:actor
			value = learning
			step = 4
			multiplier = 0.75
			offset = -5
			min = 0
			desc = AI_GUARDIAN_SKILL_LEARNING
		}

		#More/Less likely based on difference in rank between actor and recipient
		modifier = {
			add = 20
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 1
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = 30
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 2
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = 40
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 3
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = 50
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 4
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = 60
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = 5
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -20
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -1
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -30
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -2
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -40
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -3
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -50
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -4
				}
			}
			desc = AI_RANK_DIFF
		}
		modifier = {
			add = -60
			scope:actor = {
				tier_difference = {
					target = scope:recipient
					value = -5
				}
			}
			desc = AI_RANK_DIFF
		}
		
		modifier = {
			add = intimidated_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_reason_value
			scope:recipient = {
				target_is_liege_or_above = scope:actor
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_external_reason_value
			scope:recipient = {
				NOT = { target_is_liege_or_above = scope:actor }
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = {
			add = diarch_should_educate_liege_value
			scope:actor.diarch ?= scope:recipient
			desc = DIARCH_SHOULD_EDUCATE_LIEGE_TO_DIARCH
		}

		# Unity modifiers
		evaluate_action_increasing_house_unity = {
			VALUE = 100
		}
	}
	
	send_option = {
		is_shown = {
			exists = scope:secondary_actor
			exists = scope:secondary_recipient
			NOT = { scope:secondary_actor.culture = scope:secondary_recipient.culture }
		}
		flag = convert_culture
		localization = EDUCATE_CHILD_OPTION_CONVERT_CULTURE
		current_description = {
			first_valid = {
				triggered_desc = {
					trigger = {
						exists = scope:secondary_actor
						scope:secondary_actor = { is_adult = no }
					}
					desc = EDUCATE_CHILD_OPTION_CONVERT_CULTURE_TT_TO_RECIPIENT
				}
				triggered_desc = {
					trigger = {
						exists = scope:secondary_recipient
						scope:secondary_recipient = { is_adult = no }
					}
					desc = EDUCATE_CHILD_OPTION_CONVERT_CULTURE_TT_TO_ACTOR
				}
			}
		}
	}
	send_option = {
		is_shown = {
			exists = scope:secondary_actor
			exists = scope:secondary_recipient
			NOT = { scope:secondary_actor.faith = scope:secondary_recipient.faith }
		}
		flag = convert_faith
		localization = EDUCATE_CHILD_OPTION_CONVERT_FAITH
		current_description = {
			first_valid = {
				triggered_desc = {
					trigger = {
						exists = scope:secondary_actor
						scope:secondary_actor = { is_adult = no }
					}
					desc = EDUCATE_CHILD_OPTION_CONVERT_FAITH_TT_TO_RECIPIENT
				}
				triggered_desc = {
					trigger = {
						exists = scope:secondary_recipient
						scope:secondary_recipient = { is_adult = no }
					}
					desc = EDUCATE_CHILD_OPTION_CONVERT_FAITH_TT_TO_ACTOR
				}
			}
		}
	}
	send_option = {
		is_shown = {
			OR = {
				scope:recipient = {
					any_realm_province = {
						has_university_building_trigger = yes
					}
				}
				scope:actor = {
					this = scope:secondary_actor
					any_realm_province = {
						has_university_building_trigger = yes
					}
				}
			}
		}
		is_valid = {
			scope:actor.gold >= scope:actor.monumental_gold_value
		}
		starts_enabled = { always = yes	}
		flag = send_to_university
		localization = EDUCATION_UNIVERSITY
	}
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = education_hook
		localization = EDUCATION_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no
	
	ai_targets = {
		ai_recipients = vassals
		ai_recipients = head_of_faith
	}
	
	ai_frequency = 12
	
	ai_potential = {
		primary_title.tier >= tier_duchy
		any_courtier = {
			is_physically_able_adult = no
			is_child_of = root
			is_imprisoned = no
			NOT = { has_trait = incapable }
		}
		any_vassal = {
			primary_title.tier >= tier_county
			opinion = {
				target = root
				value <= -25
			}
		}
	}
	
	ai_will_do = {
		base = 0

		modifier = { # The AI wants to use wards to improve opinion with their vassals
			add = 500
			scope:actor = {
				NOT = {
					has_trait = paranoid
				}
			}
			scope:recipient = scope:secondary_recipient
			scope:recipient = {
				is_ruler = yes
				primary_title.tier >= tier_county
				OR = {
					AND = {
						is_vassal_of = scope:actor
						opinion = {
							target = scope:actor
							value <= -25
						}
					}
					AND = {
						is_powerful_vassal_of = scope:actor
						opinion = {
							target = scope:actor
							value <= 25
						}
					}
				}
			}
		}

		modifier = { # Zealous AI's want their head of faith to educate their children
			add = 600
			scope:actor = {
				OR = {
					has_trait = zealous
					ai_zeal >= 90
				}
			}
			scope:recipient = scope:secondary_recipient
			scope:recipient = scope:actor.faith.religious_head
			scope:recipient = {
				is_ai = yes # Don't spam players
				num_of_relation_ward < 2
			}
		}

		# Unity modifiers
		evaluate_action_increasing_house_unity = {
			VALUE = 100
		}

		modifier = { # Don't send your primary heir away
			factor = 0
			scope:secondary_actor = {
				is_primary_heir_of = scope:actor
			}
		}

		modifier = { # The AI shouldn't change culture/faith of their children
			# factor = 0
			add = -10000
			OR = {
				scope:convert_culture = yes
				scope:convert_faith = yes
			}
		}

		modifier = { # Don't care about random children
			factor = 0
			scope:secondary_actor = {
				NOR = {
					is_close_family_of = scope:actor
					this = scope:actor
				}
			}
		}

		modifier = { # Don't send children that are in need of a culture conversion
			factor = 0
			NOT = {
				scope:secondary_actor.culture = scope:actor.culture
			}
		}

		modifier = { # Don't send away yourself
			factor = 0
			scope:secondary_actor = scope:actor
		}

		modifier = { # Rivals are not welcome
			factor = 0
			scope:recipient = {
				OR = {
					has_relation_rival = scope:actor
					has_relation_nemesis = scope:actor
				}
			}
		}

		modifier = { # Don't backtrack
			factor = 0
			scope:secondary_actor = {
				any_relation = {
					type = guardian
					OR = {
						is_vassal_of = scope:actor
						this = scope:actor.faith.religious_head
					}
				}
			}
		}

		modifier = { # Don't override players
			factor = 0
			scope:secondary_actor = {
				has_character_flag = player_educated
			}
		}
		
		modifier = { # Don't spend gold on this unless very, very rich
			factor = 0
			scope:send_to_university = yes
			
			scope:actor.short_term_gold <= scope:actor.monumental_gold_value
		}
	}
}